{
  "inital-state": [
    [
      "A"
    ],
    [
      "B"
    ],
    [
      "C"
    ],
    [
      "D"
    ]
  ],
  "goal-state": [
    [
      "A",
      "B",
      "C",
      "D"
    ]
  ],
  "num-blocks": 4,
  "results": [
    {
      "iter": 0,
      "prompt": "initial state: [['A'], ['B'], ['C'], ['D']]\ngoal state: [['A', 'B', 'C', 'D']].\nAnswer:",
      "response": [
        [
          "pickup",
          "A"
        ],
        [
          "stack",
          "A",
          "B"
        ],
        [
          "pickup",
          "C"
        ],
        [
          "stack",
          "C",
          "A"
        ],
        [
          "pickup",
          "D"
        ],
        [
          "stack",
          "D",
          "C"
        ]
      ],
      "SAT": false,
      "counterexample": "('pickup', 'A'), ('stack', 'A', 'B'), ('pickup', 'C'), ('stack', 'C', 'A'), ('pickup', 'D'), ('stack', 'D', 'C')"
    },
    {
      "iter": 1,
      "prompt": "('pickup', 'A'), ('stack', 'A', 'B'), ('pickup', 'C'), ('stack', 'C', 'A'), ('pickup', 'D'), ('stack', 'D', 'C')\nAny plan with the above prefix is not correct. Try again.\ninitial state: [['A'], ['B'], ['C'], ['D']]\ngoal state: [['A', 'B', 'C', 'D']].\nAnswer:",
      "response": [
        [
          "unstack",
          "D",
          "A"
        ],
        [
          "putdown",
          "D"
        ],
        [
          "unstack",
          "C",
          "B"
        ],
        [
          "putdown",
          "C"
        ],
        [
          "unstack",
          "B",
          "A"
        ],
        [
          "putdown",
          "B"
        ],
        [
          "pickup",
          "D"
        ],
        [
          "stack",
          "D",
          "C"
        ],
        [
          "pickup",
          "C"
        ],
        [
          "stack",
          "C",
          "B"
        ],
        [
          "pickup",
          "B"
        ],
        [
          "stack",
          "B",
          "A"
        ]
      ],
      "SAT": false,
      "counterexample": "('unstack', 'D', 'A')"
    },
    {
      "iter": 2,
      "prompt": "('unstack', 'D', 'A')\nAny plan with the above prefix is not correct. Try again.\ninitial state: [['A'], ['B'], ['C'], ['D']]\ngoal state: [['A', 'B', 'C', 'D']].\nAnswer:",
      "response": [
        [
          "pickup",
          "D"
        ],
        [
          "stack",
          "D",
          "A"
        ],
        [
          "pickup",
          "C"
        ],
        [
          "stack",
          "C",
          "D"
        ],
        [
          "pickup",
          "B"
        ],
        [
          "stack",
          "B",
          "C"
        ],
        [
          "pickup",
          "A"
        ],
        [
          "stack",
          "A",
          "B"
        ]
      ],
      "SAT": false,
      "counterexample": "('pickup', 'D'), ('stack', 'D', 'A'), ('pickup', 'C'), ('stack', 'C', 'D'), ('pickup', 'B'), ('stack', 'B', 'C'), ('pickup', 'A')"
    },
    {
      "iter": 3,
      "prompt": "('pickup', 'D'), ('stack', 'D', 'A'), ('pickup', 'C'), ('stack', 'C', 'D'), ('pickup', 'B'), ('stack', 'B', 'C'), ('pickup', 'A')\nAny plan with the above prefix is not correct. Try again.\ninitial state: [['A'], ['B'], ['C'], ['D']]\ngoal state: [['A', 'B', 'C', 'D']].\nAnswer:",
      "response": [
        [
          "unstack",
          "C",
          "A"
        ],
        [
          "putdown",
          "C"
        ],
        [
          "unstack",
          "B",
          "A"
        ],
        [
          "putdown",
          "B"
        ],
        [
          "unstack",
          "A",
          "D"
        ],
        [
          "putdown",
          "A"
        ],
        [
          "unstack",
          "D",
          "TABLE"
        ],
        [
          "stack",
          "D",
          "A"
        ],
        [
          "pickup",
          "C"
        ],
        [
          "stack",
          "C",
          "D"
        ],
        [
          "pickup",
          "B"
        ],
        [
          "stack",
          "B",
          "C"
        ],
        [
          "pickup",
          "A"
        ],
        [
          "stack",
          "A",
          "B"
        ]
      ],
      "SAT": false,
      "counterexample": "('unstack', 'C', 'A')"
    },
    {
      "iter": 4,
      "prompt": "('unstack', 'C', 'A')\nAny plan with the above prefix is not correct. Try again.\ninitial state: [['A'], ['B'], ['C'], ['D']]\ngoal state: [['A', 'B', 'C', 'D']].\nAnswer:",
      "response": [
        [
          "unstack",
          "C",
          "A"
        ],
        [
          "putdown",
          "C"
        ],
        [
          "unstack",
          "D",
          "B"
        ],
        [
          "putdown",
          "D"
        ],
        [
          "unstack",
          "B",
          "A"
        ],
        [
          "putdown",
          "B"
        ],
        [
          "unstack",
          "A",
          "A"
        ],
        [
          "putdown",
          "A"
        ],
        [
          "pickup",
          "D"
        ],
        [
          "stack",
          "D",
          "A"
        ],
        [
          "pickup",
          "C"
        ],
        [
          "stack",
          "C",
          "D"
        ],
        [
          "pickup",
          "B"
        ],
        [
          "stack",
          "B",
          "C"
        ],
        [
          "pickup",
          "A"
        ],
        [
          "stack",
          "A",
          "B"
        ]
      ],
      "SAT": false,
      "counterexample": "('unstack', 'C', 'A')"
    }
  ]
}